#!/usr/bin/env ruby
# frozen_string_literal: true

require 'search_solr_tools'
require 'thor'

# rubocop:disable Metrics/AbcSize
class SolrHarvestCLI < Thor
  include SSTLogger

  map %w[--version -v] => :__print_version

  def self.exit_on_failure?
    false
  end

  desc '--version, -v', 'print the version'
  def __print_version
    puts SearchSolrTools::VERSION
  end

  desc 'errcode CODE', 'Print all exit codes bundled in CODE.  Omit CODE to print all codes'
  def errcode(code = -1)
    codes = SearchSolrTools::Errors::HarvestError.describe_exit_code(code)

    puts 'CODE | DESCRIPTION'
    puts '-----+------------'
    codes.each do |c, text|
      puts format('%4<code>d | %<text>s', code: c, text:)
    end
  end

  desc 'ping', 'Ping the solr and harvesting endpoints related to the specified data center(s)'
  option :data_center, type: :array, required: true
  option :environment, required: true
  def ping
    set_log_environment options[:environment]
    solr_success = true
    source_success = true
    options[:data_center].each do |target|
      begin
        harvest_class = get_harvester_class(target)
        harvester = harvest_class.new(options[:environment])
        solr_status = harvester.ping_solr
        source_status = harvester.ping_source
      rescue StandardError => e
        solr_status = false
        source_status = false
        logger.error "Ping failed for #{target}: #{e}}"
      end
      solr_success &&= solr_status
      source_success &&= source_status

      msg = "Target: #{target}, Solr ping OK? #{solr_status}, data center ping OK? #{source_status}"
      puts msg
    end

    ping_status = SearchSolrTools::Helpers::HarvestStatus.new(
      SearchSolrTools::Helpers::HarvestStatus::PING_SOLR   => solr_success,
      SearchSolrTools::Helpers::HarvestStatus::PING_SOURCE => source_success
    )
    raise SearchSolrTools::Errors::HarvestError, ping_status unless ping_status.ok?
  rescue SearchSolrTools::Errors::HarvestError => e
    exit e.exit_code
  end

  desc 'harvest', 'Harvest from the specified data centers'
  option :data_center, type: :array, required: true
  option :environment, required: true
  option :die_on_failure, type: :boolean
  def harvest(die_on_failure = options[:die_on_failure] || false)
    set_log_environment options[:environment]
    options[:data_center].each do |target|
      logger.info "Target: #{target}"
      begin
        harvest_class = get_harvester_class(target)
        harvester = harvest_class.new(options[:environment], die_on_failure:)
        ping_status = SearchSolrTools::Helpers::HarvestStatus.new(
          SearchSolrTools::Helpers::HarvestStatus::PING_SOLR   => harvester.ping_solr,
          SearchSolrTools::Helpers::HarvestStatus::PING_SOURCE => harvester.ping_source
        )
        raise SearchSolrTools::Errors::HarvestError, ping_status unless ping_status.ok?

        harvester.harvest_and_delete
      rescue SearchSolrTools::Errors::HarvestError => e
        logger.error "THERE WERE HARVEST STATUS ERRORS:\n#{e.message}"
        exit e.exit_code
      rescue StandardError => e
        # If it gets here, there is an error that we aren't expecting.
        logger.error "harvest failed for #{target}: #{e.message}"
        logger.error e.backtrace
        exit SearchSolrTools::Errors::HarvestError::ERRCODE_OTHER
      end
    end
  end

  desc 'list_harvesters', 'List all harvesters'
  def list_harvesters
    puts harvester_map.keys
  end

  desc 'delete_all', 'Delete all documents from the index'
  option :environment, required: true
  def delete_all
    set_log_environment options[:environment]
    env = SearchSolrTools::SolrEnvironments[options[:environment]]
    logger.info('DELETE ALL started')
    `curl 'http://#{env[:host]}:#{env[:port]}/solr/update' -H 'Content-Type: text/xml; charset=utf-8' --data '<delete><query>*:*</query></delete>'`
    `curl 'http://#{env[:host]}:#{env[:port]}/solr/update' -H 'Content-Type: text/xml; charset=utf-8' --data '<commit/>'`
    logger.info("DELETE ALL complete")
  end

  desc 'delete_all_auto_suggest', 'Delete all documents from the auto_suggest index'
  option :environment, required: true
  def delete_all_auto_suggest
    set_log_environment options[:environment]
    env = SearchSolrTools::SolrEnvironments[options[:environment]]
    logger.info('DELETE ALL AUTO_SUGGEST started')
    `curl 'http://#{env[:host]}:#{env[:port]}/solr/update' -H 'Content-Type: text/xml; charset=utf-8' --data '<delete><query>*:*</query></delete>'`
    `curl 'http://#{env[:host]}:#{env[:port]}/solr/update' -H 'Content-Type: text/xml; charset=utf-8' --data '<commit/>'`
    logger.info("DELETE ALL AUTO_SUGGEST complete")
  end

  desc 'delete_by_data_center', 'Force deletion of documents for a specific data center with timestamps before the passed timestamp in format iso8601 (2014-07-14T21:49:21Z)'
  option :timestamp, required: true
  option :environment, required: true
  option :data_center, required: true
  def delete_by_data_center
    set_log_environment options[:environment]
    logger.info("DELETE ALL for data center '#{options[:data_center]}' started")
    harvester = get_harvester_class(options[:data_center]).new options[:environment]
    harvester.delete_old_documents(options[:timestamp],
                                   "data_centers:\"#{SearchSolrTools::Helpers::SolrFormat::DATA_CENTER_NAMES[options[:data_center].upcase.to_sym][:long_name]}\"",
                                   SearchSolrTools::SolrEnvironments[harvester.environment][:collection_name],
                                   true)
    logger.info("DELETE ALL for data center '#{options[:data_center]}' complete")
  end

  no_tasks do
    def harvester_map
      {
        'nsidc'              => SearchSolrTools::Harvesters::NsidcJson,
        'nsidc_auto_suggest' => SearchSolrTools::Harvesters::NsidcAutoSuggest
      }
    end

    def get_harvester_class(data_center_name)
      name = data_center_name.downcase.to_s
      raise SearchSolrTools::Errors::HarvestError.new(nil, "Invalid data center #{name}") unless harvester_map.key?(name)

      harvester_map[name]
    end
  end
end
# rubocop:enable Metrics/AbcSize

SolrHarvestCLI.start(ARGV)
